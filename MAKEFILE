# The version of the build harness container to use
BUILD_HARNESS_REPO := ghcr.io/defenseunicorns/not-a-build-harness/not-a-build-harness
BUILD_HARNESS_VERSION := 0.0.25
BUILD_HARNESS_PLATFORM := linux/amd64


.DEFAULT_GOAL := help

# Optionally add the "-it" flag for docker run commands if the env var "CI" is not set (meaning we are on a local machine and not in github actions)
TTY_ARG :=
ifndef CI
	TTY_ARG := -it
endif

# Silent mode by default. Run `make VERBOSE=1` to turn off silent mode.
ifndef VERBOSE
.SILENT:
endif

# Idiomatic way to force a target to always run, by having it depend on this dummy target
FORCE:

.PHONY: help
help: ## Show a list of all targets
	grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
	| sed -n 's/^\(.*\): \(.*\)##\(.*\)/\1:\3/p' \
	| column -t -s ":"

.PHONY: _check-env-vars
_check-env-vars: ## checks for required env vars
REQUIRED_VARS := AWS_REGION AWS_SESSION_TOKEN BASTION_INSTANCE_ID BASTION_USER_PASSWORD VPC_CIDR

$(foreach var,$(REQUIRED_VARS),$(if $(value $(var)),,$(error $(var) is undefined)))

.PHONY: bastion-connect
bastion-connect: _check-env-vars ## Connect to the bastion host
	docker run $(TTY_ARG) --rm \
		--cap-add=NET_ADMIN \
		--cap-add=NET_RAW \
		-v "${PWD}:/app" \
		--workdir "/app/examples/complete" \
		-e AWS_REGION \
		-e AWS_DEFAULT_REGION \
		-e AWS_ACCESS_KEY_ID \
		-e AWS_SECRET_ACCESS_KEY \
		-e AWS_SESSION_TOKEN \
		-e AWS_SECURITY_TOKEN \
		-e AWS_SESSION_EXPIRATION \
		-e BASTION_INSTANCE_ID \
		-e VPC_CIDR \
		-e EKS_CLUSTER_NAME \
		--platform="${BUILD_HARNESS_PLATFORM}" \
		${BUILD_HARNESS_REPO}:${BUILD_HARNESS_VERSION} \
		bash -c 'asdf install \
				&& sshuttle -e '"'"'sshpass -p "${BASTION_USER_PASSWORD}" ssh \
					-o CheckHostIP=no \
					-o StrictHostKeyChecking=no \
					-o UserKnownHostsFile=/dev/null \
					-o ProxyCommand="aws ssm --region $(AWS_REGION) start-session --target %h --document-name AWS-StartSSHSession --parameters portNumber=%p"'"'"' --dns --disable-ipv6 -r ec2-user@$(BASTION_INSTANCE_ID) $(VPC_CIDR) \
						|| { echo "Error: SSHUTTLE DEAD"; exit 1; }& \
					bash'